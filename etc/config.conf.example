/*****************************************************************************
 * Конфиг сервера основан на библиотеке libconfig++                          *
 * Описание синтаксиса на русском можно посмотреть на хабре:                 *
 *   https://habrahabr.ru/post/148948/#para-configг                          *
 * Репозиторий библиотеки:                                                   *
 *   https://github.com/hyperrealm/libconfig                                 *
 *****************************************************************************/

/*****************************************************************************
 * Параметры ядра приложения                                                 *
 *****************************************************************************/
core = {
	workers = 4; // Количество рабочих потоков
	timeZone = "Europe/Moscow"; // Временная зона сервера
	processName = "primitive"; // Имя процесса в диспетчере
};

/*****************************************************************************
 * Список активных транспортов                                               *
 *****************************************************************************/
transports = (
	{
		// Имя транспорта. Произвольный буквенно-цифровой идентификатор
		name = "transport1";

		// Тип транспорта
		//   Доступные значения: http, websocket, packet
		type = "http";

		// Флаг безопасного соединения
		//   При включении трафик оборачивается в SSL.
		//   Не рекоммендуется, так как используется самоподписаный сертификат
		secure = false;

		// Параметры слушающего сокета
		host = "0.0.0.0";   // IP
		port = 54321;       // Порт
	}
);

/*****************************************************************************
 * Конфигурация для подключения к базам данных                               *
 *****************************************************************************/
databases = (
	{
		// Имя пула коннектов к БД
		//   Уникальный буквенно-цифровой идентификатор
		name = "common";

		// Тип сервера БД
		//   Реализованы: mysql
		type = "mysql";

		// Параметры подключения к серверу БД
		dbserver = "127.0.0.1";               // IP сервера БД (при TCP подключении)
		dbport = 3306;                        // Порт сервера БД (при TCP подключении)
		dbsocket = "/run/mysqld/mysqld.sock"; // Полное имя сокета (для UNIX-socket)

		// Параметры доступа
		dbuser = "test"; // Имя пользователя
		dbpass = "test"; // Пароль пользователя
		dbname = "test"; // Имя БД по умолчанию

		// Параметры соединения
		dbcharset = "utf8mb4"; // Кодировка
		dbtimezone = "+03:00"; // Временная зона
	}
);

/*****************************************************************************
 * Список активных сервисов                                                  *
 *****************************************************************************/
services = (
	{
		// Имя сервиса
		name="status";

		// Тип сервиса
		type="status";

		// Описание частей сервиса для работы с 3rd-party приложениями
		//   Каждая часть реализует логику для конкретной третьей стороны.
		//   Может повторяться для работы на разных transport+endpoints
		parts = (
			{
				// Тип составной части сервиса
				//   Зависит от реализации сервиса
				type = "client";

				// Используемый транспорт
				//   Идентификатор транспорта, описаный в конфиге
				transport = "transport1";

				// Начальная часть URI для роутинга
				//   Имеет смысл только для транспорта, основанного на http
				uri = "/status";
			}
		);
	}
);

/*****************************************************************************
 * Конфигурация внешних приложений                                           *
 *****************************************************************************/
applications = (
	{
		// Тип 3rd-party приложения
		type = "admin";

		// Идентификатор приложения
		//   В рамках одного сервера предполагается, что appId уникален,
		//   независимо от типа. С точки зрения сервера это индекс.
		appId = "statusOfShard";

		// Ключ или секрет приложения для формирования подписи запросов
		appKey = "*seсret*";

		// Флаг продакшен-приложения (не тестового)
		isProduction = false;
	}
);

/*****************************************************************************
 * Конфигурация системы логгирования                                         *
 *****************************************************************************/
logs = {
	// Конфигурация синков
	sinks = (
		{
			// Имя синка
			name  = "file";

			// Тип синка
			type = "file"; // Вывод логов в файл

			// Папка логов
			directory = "/opt/primitive/logs/";

			// Имя файла лога
			directory = "primitive.log";

			// Переоткрытие файла лога (для ротации) производится по сигналу USR1
		},
		{
			name  = "console";
			type = "console"; // Вывод в консоль
		}
	);

	// Конфигурация логгеров
	loggers = (
		{
			// Имя логгера
			name = "*"; // Именем '*' указывается конфиг по умолчанию

			// Синк, используемый логгером
			sink = "console";

			// Уровень детализции лога
			//   Возможные значения: trace, debug, info, warn, error, crit, off
			level = "info";
		}
	);
};
